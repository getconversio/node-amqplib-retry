{"version":3,"sources":["../src/initializer.js"],"names":["config","require","Promise","Initializer","channel","clientQueueName","failureQueueName","self","try","all","assertQueue","delayQueueName","durable","arguments","exchangeName","readyRouteKey","readyQueueName","checkQueue","assertExchange","then","bindQueue","isInitialized","module","exports"],"mappings":"wpBAAA,GAAIA,QAASC,QAAQ,UAAR,CAAb,CACA,GAAIC,SAAUD,QAAQ,UAAR,CAAd,C,GAEME,Y,YACJ,qBAAaC,OAAb,CAAsBC,eAAtB,CAAuCC,gBAAvC,CAAyD,mCACvD,KAAKF,OAAL,CAAeA,OAAf,CACA,KAAKC,eAAL,CAAuBA,eAAvB,CACA,KAAKC,gBAAL,CAAwBA,gBACzB,C,uEAEa,CACZ,GAAMC,MAAO,IAAb,CACA,MAAOL,SACJM,GADI,CACA,UAAM,CACT,MAAON,SAAQO,GAAR,CAAY,CACjBF,KAAKH,OAAL,CAAaM,WAAb,CAAyBV,OAAOW,cAAhC,CAAgD,CAC9CC,QAAS,IADqC,CAE9CC,UAAW,CACT,yBAA0Bb,OAAOc,YADxB,CAET,4BAA6Bd,OAAOe,aAF3B,CAFmC,CAAhD,CADiB,CAQjBR,KAAKH,OAAL,CAAaM,WAAb,CAAyBV,OAAOgB,cAAhC,CAAgD,CAAEJ,QAAS,IAAX,CAAhD,CARiB,CASjBL,KAAKH,OAAL,CAAaa,UAAb,CAAwBV,KAAKF,eAA7B,CATiB,CAUjBE,KAAKH,OAAL,CAAaa,UAAb,CAAwBV,KAAKD,gBAA7B,CAViB,CAWjBC,KAAKH,OAAL,CAAac,cAAb,CAA4BlB,OAAOc,YAAnC,CAAiD,QAAjD,CAA2D,CAAEF,QAAS,IAAX,CAA3D,CAXiB,CAAZ,CAaR,CAfI,EAgBJO,IAhBI,CAgBC,iBAAMZ,MAAKH,OAAL,CAAagB,SAAb,CAAuBpB,OAAOgB,cAA9B,CAA8ChB,OAAOc,YAArD,CAAmEd,OAAOe,aAA1E,CAAN,CAhBD,EAiBJI,IAjBI,CAiBC,UAAM,CACVZ,KAAKc,aAAL,CAAqB,IACtB,CAnBI,CAoBR,C,0BAGHC,OAAOC,OAAP,CAAiBpB,WAAjB","file":"initializer.js","sourcesContent":["var config = require('./config')\nvar Promise = require('bluebird')\n\nclass Initializer {\n  constructor (channel, clientQueueName, failureQueueName) {\n    this.channel = channel\n    this.clientQueueName = clientQueueName\n    this.failureQueueName = failureQueueName\n  }\n\n  initialize () {\n    const self = this\n    return Promise\n      .try(() => {\n        return Promise.all([\n          self.channel.assertQueue(config.delayQueueName, {\n            durable: true,\n            arguments: {\n              'x-dead-letter-exchange': config.exchangeName,\n              'x-dead-letter-routing-key': config.readyRouteKey\n            }\n          }),\n          self.channel.assertQueue(config.readyQueueName, { durable: true }),\n          self.channel.checkQueue(self.clientQueueName),\n          self.channel.checkQueue(self.failureQueueName),\n          self.channel.assertExchange(config.exchangeName, 'direct', { durable: true })\n        ])\n      })\n      .then(() => self.channel.bindQueue(config.readyQueueName, config.exchangeName, config.readyRouteKey))\n      .then(() => {\n        self.isInitialized = true\n      })\n  }\n}\n\nmodule.exports = Initializer\n"]}